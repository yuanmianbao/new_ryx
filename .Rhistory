library(usethis)
use_vignette("ryx", "Introduction to ryx")
library(usethis)
use_package("ggplot2")
use_mit_license("Terry Yuan")
?person
library(ryx)
build_site
library(usethis)
use_readme_md()
library(ryx)
git remote add origin https://github.com/yuanmianbao/new_ryx.git
usethis::use_github()
echo "# new_ryx" >> README.md
git remote add origin https://github.com/yuanmianbao/new_ryx.git
library(ryx)
usethis::use_testthat
usethis::use_testthat()
library(ryx)
library(pkgdown)
build_site()
build_site()
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
print.ryx <- function(x, digits = 3){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$r <- round(x$df$r, digits)
x$df$p <- format.pval(x$df$p, digits)
cat("Correlations of", x$y, "with \n")
print(x$df, row.names = FALSE)
}
build_site()
build_site()
build_site()
build_site
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
library(ryx)
library(ryx)
build_site()
library(ryx)
build_site()
x <- ryx(mtcars, "cyl")
print.ryx(x)
plot.ryx(x)
if(!require(remotes)){
install.packages("remotes")
}
remotes::install_github("yuanmianbao//new_ryx")
library(ryx)
ryx::plot.ryx(x)
summary.ryx(x)
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks=seq(0,1, by=0.1))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot.ryx(x)
library(ggplot2)
plot.ryx(x)
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks=seq(0,1, by=0.1))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot.ryx(x)
x <- ryx(mtcars, "cyl")
library(ryx)
x <- ryx(mtcars, "cyl")
print(x)
plot(x)
library(ggplot2)
plot(x)
summary(x)
summary.ryx(x)
x <- ryx(mtcars, "cyl")
print(x)
plot(x)
summary(x)
summary(x)
library(ryx)
summary(x)
library(ryx)
library(ryx)
plot.ryx(x)
plot(x)
summary(x)
print.ryx(x)
build_site()
library(pkgdown)
build_site()
build_site()
library(ryx)
library(testthat)
test_that("ryx")
?test_that
?test_check("ryx")
test_check("ryx")
rlang::last_error()
?usethis::use_test("name")
library(pkgdown)
build_site()
library(ryx)
library(ryx)
build_site()
library(pkgdown)
build_site()
build_site()
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks=seq(0,1, by=0.01))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot(ryx(mtcars,"cyl"))
library(ryx)
plot(ryx(mtcars,"cyl"))
library(ggplot2)
plot(ryx(mtcars,"cyl"))
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks=seq(0,1, by=0.05))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot(ryx(mtcars,"cyl"))
library(MASS)
x <- ryx(Boston, "medv")
plot(x)
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks=seq(0,1, by=0.1))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot(x)
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks=seq(-1, 1, by=0.1))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks=c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot(x)
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks=c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot(x)
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks=c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))+
theme_light()+
geom_segment(x=0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot(x)
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks= seq(0.0, 1.0, by = 0.1))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot(x)
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_discrete(breaks= seq(0.0, 1.0, by = 0.1))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0.0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot(x)
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(breaks= seq(0.0, 1.0, by = 0.1))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0.0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot(x)
print(x)
summary()
summary(x)
plot.ryx <- function(x){
if(!inherits(x, "ryx")) {
stop("This function requires an object type 'ryx'")
}
x$df$type <- ifelse(x$df$r>0, "positive", "negative")
ggplot(x$df,
aes(x = abs(x$df$r),
y = reorder(x$df$variable, abs(x$df$r)),
colour = x$df$type))+
geom_point(size =3)+
scale_colour_manual(values = c(positive = "blue", negative = "red"))+
labs(title = paste("Correlation with",
x$y),
colour = "Direction")+
xlab("Correlation (absolute value)")+
ylab("Variables")+
scale_x_continuous(limits = c(0,1),breaks= seq(0.0, 1.0, by = 0.1))+
theme_light()+
theme(panel.grid.major.y = element_line(linetype = 0),
panel.grid.major.x = element_line(linetype = 2))+
geom_segment(x=0.0,
y = x$df$variable,
xend = abs(x$df$r),
yend = x$df$variable,
color = "light grey",
size = 0.3)
}
plot(x)
library(pkgdown)
build_site()
library(ryx)
library(MASS)
myryx<- ryx(Boston, "medv")
print(myryx)
plot(myryx)
summary(myryx)
?kmeans
library(pkgdown)
build_site()
